<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!-- 启动对@AspectJ注解的支持 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- spring扫描注解的配置 -->
    <context:component-scan base-package="com.gang.practice.spring">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- 开启这个配置，spring才能识别@Scheduled注解 -->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <task:scheduler id="qbScheduler" pool-size="12"/>
    <!--引入配置文件-->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:jdbc.properties"/>

    <!-- 数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${db.driverClass}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <!-- Setting -->
        <!--maxActive: 最大连接数量 -->
        <property name="maxActive" value="100"/>
        <!--minIdle: 最小空闲连接 -->
        <property name="minIdle" value="30"/>
        <!--maxIdle: 最大空闲连接 -->
        <property name="maxIdle" value="100"/>
        <!--initialSize: 初始化连接 -->
        <property name="initialSize" value="30"/>
        <!--maxWait: 最大等待时间 -->
        <property name="maxWait" value="10000"/>
        <!-- 自动重连设置 -->
        <property name="testWhileIdle">
            <value>true</value>
        </property>
        <property name="testOnBorrow">
            <value>false</value>
        </property>
        <property name="testOnReturn">
            <value>false</value>
        </property>
        <property name="validationQuery">
            <value>select 1 from dual</value>
        </property>
        <property name="timeBetweenEvictionRunsMillis">
            <value>30000</value>
        </property>
        <property name="numTestsPerEvictionRun">
            <value>50</value>
        </property>
    </bean>
    <!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:mybatis/*.xml</value>
            </list>
        </property>
    </bean>
    <!-- 定义式事务Transction -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--MapperScannerConigurer实际是在解析加载bean定义阶段的，此时设置sqlSessionFactory会导致提前初始化一些类-->
    <!--PropertyPlaceholderConfigurer还没来得及替换定义中的变量，导致把表达式当作字符串复制了-->
    <!--解决办法：使用sqlSessionFactoryBeanName注入，不会立即初始化sqlSessionFactory-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.gang.practice.spring.dao"/>
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
    </bean>
</beans>